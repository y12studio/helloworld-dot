/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AccountStakingInfo : Note: Runtime versions of Kusama less than 1062 will either have `lastReward` in place of `claimedRewards`, or no field at all. This is related to changes in reward distribution. See: [Lazy Payouts](https://github.com/paritytech/substrate/pull/4474), [Simple Payouts](https://github.com/paritytech/substrate/pull/5406)



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountStakingInfo {
    #[serde(rename = "at", skip_serializing_if = "Option::is_none")]
    pub at: Option<crate::models::BlockIdentifiers>,
    /// The account to which rewards will be paid. Can be 'Staked' (Stash account, adding to the amount at stake), 'Stash' (Stash address, not adding to the amount at stake), or 'Controller' (Controller address).
    #[serde(rename = "rewardDestination", skip_serializing_if = "Option::is_none")]
    pub reward_destination: Option<RewardDestination>,
    /// Controller address for the given Stash.
    #[serde(rename = "controller", skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    /// Number of slashing spans on Stash account; `null` if provided address is not a Controller.
    #[serde(rename = "numSlashingSpans", skip_serializing_if = "Option::is_none")]
    pub num_slashing_spans: Option<String>,
    #[serde(rename = "nominations", skip_serializing_if = "Option::is_none")]
    pub nominations: Option<crate::models::Nominations>,
    #[serde(rename = "stakingLedger", skip_serializing_if = "Option::is_none")]
    pub staking_ledger: Option<crate::models::StakingLedger>,
}

impl AccountStakingInfo {
    /// Note: Runtime versions of Kusama less than 1062 will either have `lastReward` in place of `claimedRewards`, or no field at all. This is related to changes in reward distribution. See: [Lazy Payouts](https://github.com/paritytech/substrate/pull/4474), [Simple Payouts](https://github.com/paritytech/substrate/pull/5406)
    pub fn new() -> AccountStakingInfo {
        AccountStakingInfo {
            at: None,
            reward_destination: None,
            controller: None,
            num_slashing_spans: None,
            nominations: None,
            staking_ledger: None,
        }
    }
}

/// The account to which rewards will be paid. Can be 'Staked' (Stash account, adding to the amount at stake), 'Stash' (Stash address, not adding to the amount at stake), or 'Controller' (Controller address).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RewardDestination {
    #[serde(rename = "Staked")]
    Staked,
    #[serde(rename = "Stash")]
    Stash,
    #[serde(rename = "Controller")]
    Controller,
}

