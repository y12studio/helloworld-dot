/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccountBalanceInfo from './model/AccountBalanceInfo';
import AccountStakingInfo from './model/AccountStakingInfo';
import AccountStakingPayouts from './model/AccountStakingPayouts';
import AccountStakingPayoutsErasPayouts from './model/AccountStakingPayoutsErasPayouts';
import AccountVestingInfo from './model/AccountVestingInfo';
import BalanceLock from './model/BalanceLock';
import Block from './model/Block';
import BlockFinalize from './model/BlockFinalize';
import BlockIdentifiers from './model/BlockIdentifiers';
import BlockInitialize from './model/BlockInitialize';
import DigestItem from './model/DigestItem';
import ElectionStatus from './model/ElectionStatus';
import Error from './model/Error';
import Extrinsic from './model/Extrinsic';
import ExtrinsicMethod from './model/ExtrinsicMethod';
import NodeNetwork from './model/NodeNetwork';
import NodeRole from './model/NodeRole';
import NodeVersion from './model/NodeVersion';
import Nominations from './model/Nominations';
import PalletStorageItem from './model/PalletStorageItem';
import PalletStorageItemMetadata from './model/PalletStorageItemMetadata';
import PeerInfo from './model/PeerInfo';
import RuntimeCode from './model/RuntimeCode';
import RuntimeDispatchInfo from './model/RuntimeDispatchInfo';
import RuntimeSpec from './model/RuntimeSpec';
import SanitizedEvent from './model/SanitizedEvent';
import Signature from './model/Signature';
import StakingLedger from './model/StakingLedger';
import StakingProgress from './model/StakingProgress';
import Transaction from './model/Transaction';
import TransactionDryRun from './model/TransactionDryRun';
import TransactionFailedToParse from './model/TransactionFailedToParse';
import TransactionFailedToSubmit from './model/TransactionFailedToSubmit';
import TransactionFailure from './model/TransactionFailure';
import TransactionFeeEstimate from './model/TransactionFeeEstimate';
import TransactionFeeEstimateFailure from './model/TransactionFeeEstimateFailure';
import TransactionFeeEstimateFailureAt from './model/TransactionFeeEstimateFailureAt';
import TransactionMaterial from './model/TransactionMaterial';
import TransactionPool from './model/TransactionPool';
import TransactionPoolPool from './model/TransactionPoolPool';
import TransactionSuccess from './model/TransactionSuccess';
import UnappliedSlash from './model/UnappliedSlash';
import VestingSchedule from './model/VestingSchedule';
import AccountsApi from './api/AccountsApi';
import BlocksApi from './api/BlocksApi';
import NodeApi from './api/NodeApi';
import PalletsApi from './api/PalletsApi';
import RuntimeApi from './api/RuntimeApi';
import StakingApi from './api/StakingApi';
import TransactionApi from './api/TransactionApi';


/**
* Substrate_API_Sidecar_is_a_REST_service_that_makes_it_easy_to_interact_with_blockchain_nodes_built_using_Substrates_FRAME_framework_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SubstrateApiSidecarV1 = require('index'); // See note below*.
* var xxxSvc = new SubstrateApiSidecarV1.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SubstrateApiSidecarV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SubstrateApiSidecarV1.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SubstrateApiSidecarV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0-oas3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountBalanceInfo model constructor.
     * @property {module:model/AccountBalanceInfo}
     */
    AccountBalanceInfo,

    /**
     * The AccountStakingInfo model constructor.
     * @property {module:model/AccountStakingInfo}
     */
    AccountStakingInfo,

    /**
     * The AccountStakingPayouts model constructor.
     * @property {module:model/AccountStakingPayouts}
     */
    AccountStakingPayouts,

    /**
     * The AccountStakingPayoutsErasPayouts model constructor.
     * @property {module:model/AccountStakingPayoutsErasPayouts}
     */
    AccountStakingPayoutsErasPayouts,

    /**
     * The AccountVestingInfo model constructor.
     * @property {module:model/AccountVestingInfo}
     */
    AccountVestingInfo,

    /**
     * The BalanceLock model constructor.
     * @property {module:model/BalanceLock}
     */
    BalanceLock,

    /**
     * The Block model constructor.
     * @property {module:model/Block}
     */
    Block,

    /**
     * The BlockFinalize model constructor.
     * @property {module:model/BlockFinalize}
     */
    BlockFinalize,

    /**
     * The BlockIdentifiers model constructor.
     * @property {module:model/BlockIdentifiers}
     */
    BlockIdentifiers,

    /**
     * The BlockInitialize model constructor.
     * @property {module:model/BlockInitialize}
     */
    BlockInitialize,

    /**
     * The DigestItem model constructor.
     * @property {module:model/DigestItem}
     */
    DigestItem,

    /**
     * The ElectionStatus model constructor.
     * @property {module:model/ElectionStatus}
     */
    ElectionStatus,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Extrinsic model constructor.
     * @property {module:model/Extrinsic}
     */
    Extrinsic,

    /**
     * The ExtrinsicMethod model constructor.
     * @property {module:model/ExtrinsicMethod}
     */
    ExtrinsicMethod,

    /**
     * The NodeNetwork model constructor.
     * @property {module:model/NodeNetwork}
     */
    NodeNetwork,

    /**
     * The NodeRole model constructor.
     * @property {module:model/NodeRole}
     */
    NodeRole,

    /**
     * The NodeVersion model constructor.
     * @property {module:model/NodeVersion}
     */
    NodeVersion,

    /**
     * The Nominations model constructor.
     * @property {module:model/Nominations}
     */
    Nominations,

    /**
     * The PalletStorageItem model constructor.
     * @property {module:model/PalletStorageItem}
     */
    PalletStorageItem,

    /**
     * The PalletStorageItemMetadata model constructor.
     * @property {module:model/PalletStorageItemMetadata}
     */
    PalletStorageItemMetadata,

    /**
     * The PeerInfo model constructor.
     * @property {module:model/PeerInfo}
     */
    PeerInfo,

    /**
     * The RuntimeCode model constructor.
     * @property {module:model/RuntimeCode}
     */
    RuntimeCode,

    /**
     * The RuntimeDispatchInfo model constructor.
     * @property {module:model/RuntimeDispatchInfo}
     */
    RuntimeDispatchInfo,

    /**
     * The RuntimeSpec model constructor.
     * @property {module:model/RuntimeSpec}
     */
    RuntimeSpec,

    /**
     * The SanitizedEvent model constructor.
     * @property {module:model/SanitizedEvent}
     */
    SanitizedEvent,

    /**
     * The Signature model constructor.
     * @property {module:model/Signature}
     */
    Signature,

    /**
     * The StakingLedger model constructor.
     * @property {module:model/StakingLedger}
     */
    StakingLedger,

    /**
     * The StakingProgress model constructor.
     * @property {module:model/StakingProgress}
     */
    StakingProgress,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionDryRun model constructor.
     * @property {module:model/TransactionDryRun}
     */
    TransactionDryRun,

    /**
     * The TransactionFailedToParse model constructor.
     * @property {module:model/TransactionFailedToParse}
     */
    TransactionFailedToParse,

    /**
     * The TransactionFailedToSubmit model constructor.
     * @property {module:model/TransactionFailedToSubmit}
     */
    TransactionFailedToSubmit,

    /**
     * The TransactionFailure model constructor.
     * @property {module:model/TransactionFailure}
     */
    TransactionFailure,

    /**
     * The TransactionFeeEstimate model constructor.
     * @property {module:model/TransactionFeeEstimate}
     */
    TransactionFeeEstimate,

    /**
     * The TransactionFeeEstimateFailure model constructor.
     * @property {module:model/TransactionFeeEstimateFailure}
     */
    TransactionFeeEstimateFailure,

    /**
     * The TransactionFeeEstimateFailureAt model constructor.
     * @property {module:model/TransactionFeeEstimateFailureAt}
     */
    TransactionFeeEstimateFailureAt,

    /**
     * The TransactionMaterial model constructor.
     * @property {module:model/TransactionMaterial}
     */
    TransactionMaterial,

    /**
     * The TransactionPool model constructor.
     * @property {module:model/TransactionPool}
     */
    TransactionPool,

    /**
     * The TransactionPoolPool model constructor.
     * @property {module:model/TransactionPoolPool}
     */
    TransactionPoolPool,

    /**
     * The TransactionSuccess model constructor.
     * @property {module:model/TransactionSuccess}
     */
    TransactionSuccess,

    /**
     * The UnappliedSlash model constructor.
     * @property {module:model/UnappliedSlash}
     */
    UnappliedSlash,

    /**
     * The VestingSchedule model constructor.
     * @property {module:model/VestingSchedule}
     */
    VestingSchedule,

    /**
    * The AccountsApi service constructor.
    * @property {module:api/AccountsApi}
    */
    AccountsApi,

    /**
    * The BlocksApi service constructor.
    * @property {module:api/BlocksApi}
    */
    BlocksApi,

    /**
    * The NodeApi service constructor.
    * @property {module:api/NodeApi}
    */
    NodeApi,

    /**
    * The PalletsApi service constructor.
    * @property {module:api/PalletsApi}
    */
    PalletsApi,

    /**
    * The RuntimeApi service constructor.
    * @property {module:api/RuntimeApi}
    */
    RuntimeApi,

    /**
    * The StakingApi service constructor.
    * @property {module:api/StakingApi}
    */
    StakingApi,

    /**
    * The TransactionApi service constructor.
    * @property {module:api/TransactionApi}
    */
    TransactionApi
};
