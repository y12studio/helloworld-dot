/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TransactionDryRun : References: - `UnknownTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.UnknownTransaction.html - `InvalidTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.InvalidTransaction.html



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionDryRun {
    /// Either `DispatchOutcome` if the transaction is valid or `TransactionValidityError` if the result is invalid.
    #[serde(rename = "resultType", skip_serializing_if = "Option::is_none")]
    pub result_type: Option<ResultType>,
    /// If there was an error it will be the cause of the error. If the transaction executed correctly it will be `Ok: []`
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    #[serde(rename = "validityErrorType", skip_serializing_if = "Option::is_none")]
    pub validity_error_type: Option<ValidityErrorType>,
}

impl TransactionDryRun {
    /// References: - `UnknownTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.UnknownTransaction.html - `InvalidTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.InvalidTransaction.html
    pub fn new() -> TransactionDryRun {
        TransactionDryRun {
            result_type: None,
            result: None,
            validity_error_type: None,
        }
    }
}

/// Either `DispatchOutcome` if the transaction is valid or `TransactionValidityError` if the result is invalid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResultType {
    #[serde(rename = "DispatchOutcome")]
    DispatchOutcome,
    #[serde(rename = "TransactionValidityError")]
    TransactionValidityError,
}
/// If there was an error it will be the cause of the error. If the transaction executed correctly it will be `Ok: []`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Result {
    #[serde(rename = "Ok")]
    Ok,
    #[serde(rename = "CannotLookup")]
    CannotLookup,
    #[serde(rename = "NoUnsignedValidator")]
    NoUnsignedValidator,
    #[serde(rename = "Custom(u8)")]
    Custom_u8,
    #[serde(rename = "Call")]
    Call,
    #[serde(rename = "Payment")]
    Payment,
    #[serde(rename = "Future")]
    Future,
    #[serde(rename = "Stale")]
    Stale,
    #[serde(rename = "BadProof")]
    BadProof,
    #[serde(rename = "AncientBirthBlock")]
    AncientBirthBlock,
    #[serde(rename = "ExhaustsResources")]
    ExhaustsResources,
    #[serde(rename = "BadMandatory")]
    BadMandatory,
    #[serde(rename = "MandatoryDispatch")]
    MandatoryDispatch,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidityErrorType {
    #[serde(rename = "InvalidTransaction")]
    InvalidTransaction,
    #[serde(rename = "UnknownTransaction")]
    UnknownTransaction,
}

