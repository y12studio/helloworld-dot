/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// StakingLedger : The staking ledger.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StakingLedger {
    /// The _Stash_ account whose balance is actually locked and at stake.
    #[serde(rename = "stash", skip_serializing_if = "Option::is_none")]
    pub stash: Option<String>,
    /// The total amount of the _Stash_'s balance that we are currently accounting for. Simply `active + unlocking`.
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    /// The total amount of the _Stash_'s balance that will be at stake in any forthcoming eras.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<String>,
    /// Any balance that is becoming free, which may eventually be transferred out of the _Stash_ (assuming it doesn't get slashed first). Represented as an array of objects, each with an `era` at which `value` will be unlocked.
    #[serde(rename = "unlocking", skip_serializing_if = "Option::is_none")]
    pub unlocking: Option<String>,
    /// Array of eras for which the stakers behind a validator have claimed rewards. Only updated for _validators._
    #[serde(rename = "claimedRewards", skip_serializing_if = "Option::is_none")]
    pub claimed_rewards: Option<Vec<String>>,
}

impl StakingLedger {
    /// The staking ledger.
    pub fn new() -> StakingLedger {
        StakingLedger {
            stash: None,
            total: None,
            active: None,
            unlocking: None,
            claimed_rewards: None,
        }
    }
}


