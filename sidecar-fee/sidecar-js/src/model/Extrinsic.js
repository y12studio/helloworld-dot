/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtrinsicMethod from './ExtrinsicMethod';
import RuntimeDispatchInfo from './RuntimeDispatchInfo';
import SanitizedEvent from './SanitizedEvent';
import Signature from './Signature';

/**
 * The Extrinsic model module.
 * @module model/Extrinsic
 * @version 1.0.0-oas3
 */
class Extrinsic {
    /**
     * Constructs a new <code>Extrinsic</code>.
     * @alias module:model/Extrinsic
     */
    constructor() { 
        
        Extrinsic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Extrinsic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Extrinsic} obj Optional instance to populate.
     * @return {module:model/Extrinsic} The populated <code>Extrinsic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Extrinsic();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ExtrinsicMethod.constructFromObject(data['method']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = Signature.constructFromObject(data['signature']);
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], Object);
            }
            if (data.hasOwnProperty('tip')) {
                obj['tip'] = ApiClient.convertToType(data['tip'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = RuntimeDispatchInfo.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [SanitizedEvent]);
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('paysFee')) {
                obj['paysFee'] = ApiClient.convertToType(data['paysFee'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ExtrinsicMethod} method
 */
Extrinsic.prototype['method'] = undefined;

/**
 * @member {module:model/Signature} signature
 */
Extrinsic.prototype['signature'] = undefined;

/**
 * Account nonce, if applicable.
 * @member {String} nonce
 */
Extrinsic.prototype['nonce'] = undefined;

/**
 * Object of arguments keyed by parameter name.
 * @member {Object} args
 */
Extrinsic.prototype['args'] = undefined;

/**
 * Any tip added to the transaction.
 * @member {String} tip
 */
Extrinsic.prototype['tip'] = undefined;

/**
 * The transaction's hash.
 * @member {String} hash
 */
Extrinsic.prototype['hash'] = undefined;

/**
 * @member {module:model/RuntimeDispatchInfo} info
 */
Extrinsic.prototype['info'] = undefined;

/**
 * An array of `SanitizedEvent`s that occurred during extrinsic execution.
 * @member {Array.<module:model/SanitizedEvent>} events
 */
Extrinsic.prototype['events'] = undefined;

/**
 * Whether or not the extrinsic succeeded.
 * @member {Boolean} success
 */
Extrinsic.prototype['success'] = undefined;

/**
 * Whether the extrinsic requires a fee. Careful! This field relates to whether or not the extrinsic requires a fee if called as a transaction. Block authors could insert the extrinsic as an inherent in the block and not pay a fee. Always check that `paysFee` is `true` and that the extrinsic is signed when reconciling old blocks.
 * @member {Boolean} paysFee
 */
Extrinsic.prototype['paysFee'] = undefined;






export default Extrinsic;

