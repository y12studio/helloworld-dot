/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountStakingInfo from '../model/AccountStakingInfo';
import AccountStakingPayouts from '../model/AccountStakingPayouts';
import Error from '../model/Error';
import StakingProgress from '../model/StakingProgress';

/**
* Staking service.
* @module api/StakingApi
* @version 1.0.0-oas3
*/
export default class StakingApi {

    /**
    * Constructs a new StakingApi. 
    * @alias module:api/StakingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get payout information for a _Stash_ account.
     * Returns payout information for the last specified eras. If specifying both the depth and era query params, this endpoint will return information for (era - depth) through era. (i.e. if depth=5 and era=20 information will be returned for eras 16 through 20). N.B. You cannot query eras less then `current_era - HISTORY_DEPTH`. N.B. The `nominator*` fields correspond to the address being queried, even if it is a validator's _Stash_ address. This is because a validator is technically nominating itself.
     * @param {String} accountId SS58 address of the account. Must be a _Stash_ account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth The number of eras to query for payouts of. Must be less than or equal to `HISTORY_DEPTH`. In cases where `era - (depth -1)` is less than 0, the first era queried will be 0. (default to '1')
     * @param {String} opts.era The era to query at. (default to '`active_era - 1`')
     * @param {Boolean} opts.unclaimedOnly Only return unclaimed rewards. (default to 'true')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountStakingPayouts} and HTTP response
     */
    getStakingPayoutsByAccountIdWithHttpInfo(accountId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStakingPayoutsByAccountId");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'depth': opts['depth'],
        'era': opts['era'],
        'unclaimedOnly': opts['unclaimedOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountStakingPayouts;
      return this.apiClient.callApi(
        '/accounts/{accountId}/staking-payouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get payout information for a _Stash_ account.
     * Returns payout information for the last specified eras. If specifying both the depth and era query params, this endpoint will return information for (era - depth) through era. (i.e. if depth=5 and era=20 information will be returned for eras 16 through 20). N.B. You cannot query eras less then `current_era - HISTORY_DEPTH`. N.B. The `nominator*` fields correspond to the address being queried, even if it is a validator's _Stash_ address. This is because a validator is technically nominating itself.
     * @param {String} accountId SS58 address of the account. Must be a _Stash_ account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth The number of eras to query for payouts of. Must be less than or equal to `HISTORY_DEPTH`. In cases where `era - (depth -1)` is less than 0, the first era queried will be 0. (default to '1')
     * @param {String} opts.era The era to query at. (default to '`active_era - 1`')
     * @param {Boolean} opts.unclaimedOnly Only return unclaimed rewards. (default to 'true')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountStakingPayouts}
     */
    getStakingPayoutsByAccountId(accountId, opts) {
      return this.getStakingPayoutsByAccountIdWithHttpInfo(accountId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get progress on the general Staking pallet system.
     * Returns information on the progress of key components of the staking system and estimates of future points of interest. Replaces `/staking-info` from versions < v1.0.0.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve a staking progress report.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StakingProgress} and HTTP response
     */
    getStakingProgressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'at': opts['at']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StakingProgress;
      return this.apiClient.callApi(
        '/pallets/staking/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get progress on the general Staking pallet system.
     * Returns information on the progress of key components of the staking system and estimates of future points of interest. Replaces `/staking-info` from versions < v1.0.0.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve a staking progress report.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StakingProgress}
     */
    getStakingProgress(opts) {
      return this.getStakingProgressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get staking information for a _Stash_ account.
     * Returns information about a _Stash_ account's staking activity. Replaces `/staking/{address}` from versions < v1.0.0.
     * @param {String} accountId SS58 address of the account. Must be a _Stash_ account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to query the staking info for the specified account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountStakingInfo} and HTTP response
     */
    getStakingSummaryByAccountIdWithHttpInfo(accountId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStakingSummaryByAccountId");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'at': opts['at']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountStakingInfo;
      return this.apiClient.callApi(
        '/accounts/{accountId}/staking-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get staking information for a _Stash_ account.
     * Returns information about a _Stash_ account's staking activity. Replaces `/staking/{address}` from versions < v1.0.0.
     * @param {String} accountId SS58 address of the account. Must be a _Stash_ account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to query the staking info for the specified account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountStakingInfo}
     */
    getStakingSummaryByAccountId(accountId, opts) {
      return this.getStakingSummaryByAccountIdWithHttpInfo(accountId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
