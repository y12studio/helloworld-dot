/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StakingProgress {
    #[serde(rename = "at", skip_serializing_if = "Option::is_none")]
    pub at: Option<crate::models::BlockIdentifiers>,
    /// `EraIndex` of the era being rewarded. 
    #[serde(rename = "activeEra", skip_serializing_if = "Option::is_none")]
    pub active_era: Option<String>,
    /// Current status of era forcing.
    #[serde(rename = "forceEra", skip_serializing_if = "Option::is_none")]
    pub force_era: Option<ForceEra>,
    /// Upper bound estimate of the block height at which the next active era will start. Not included in response when `forceEra.isForceNone`.
    #[serde(rename = "nextActiveEraEstimate", skip_serializing_if = "Option::is_none")]
    pub next_active_era_estimate: Option<String>,
    /// Upper bound estimate of the block height at which the next session will start.
    #[serde(rename = "nextSessionEstimate", skip_serializing_if = "Option::is_none")]
    pub next_session_estimate: Option<String>,
    /// Array of upcoming `UnappliedSlash` indexed by era.
    #[serde(rename = "unappliedSlashes", skip_serializing_if = "Option::is_none")]
    pub unapplied_slashes: Option<Vec<crate::models::UnappliedSlash>>,
    #[serde(rename = "electionStatus", skip_serializing_if = "Option::is_none")]
    pub election_status: Option<crate::models::ElectionStatus>,
    /// Upper bound of validator set size; considered the ideal size. Not included in response when `forceEra.isForceNone`.
    #[serde(rename = "idealValidatorCount", skip_serializing_if = "Option::is_none")]
    pub ideal_validator_count: Option<String>,
    /// Stash account IDs of the validators for the current session. Not included in response when `forceEra.isForceNone`.
    #[serde(rename = "validatorSet", skip_serializing_if = "Option::is_none")]
    pub validator_set: Option<Vec<String>>,
}

impl StakingProgress {
    pub fn new() -> StakingProgress {
        StakingProgress {
            at: None,
            active_era: None,
            force_era: None,
            next_active_era_estimate: None,
            next_session_estimate: None,
            unapplied_slashes: None,
            election_status: None,
            ideal_validator_count: None,
            validator_set: None,
        }
    }
}

/// Current status of era forcing.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceEra {
    #[serde(rename = "ForceNone")]
    ForceNone,
    #[serde(rename = "NotForcing")]
    NotForcing,
    #[serde(rename = "ForceAlways")]
    ForceAlways,
    #[serde(rename = "ForceNew")]
    ForceNew,
}

