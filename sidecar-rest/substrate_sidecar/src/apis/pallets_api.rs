/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `get_staking_progress`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStakingProgressError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `pallets_pallet_id_storage_storage_item_id_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PalletsPalletIdStorageStorageItemIdGetError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    UnknownValue(serde_json::Value),
}


/// Returns information on the progress of key components of the staking system and estimates of future points of interest. Replaces `/staking-info` from versions < v1.0.0.
pub async fn get_staking_progress(configuration: &configuration::Configuration, at: Option<&str>) -> Result<crate::models::StakingProgress, Error<GetStakingProgressError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/pallets/staking/progress", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = at {
        local_var_req_builder = local_var_req_builder.query(&[("at", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStakingProgressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the value stored under the storageItemId. If it is a map, query param key1 is required. If the storage item is double map query params key1 and key2 are required.
pub async fn pallets_pallet_id_storage_storage_item_id_get(configuration: &configuration::Configuration, pallet_id: &str, storage_item_id: &str, key1: Option<&str>, key2: Option<&str>, at: Option<&str>, metadata: Option<bool>) -> Result<crate::models::PalletStorageItem, Error<PalletsPalletIdStorageStorageItemIdGetError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/pallets/{palletId}/storage/{storageItemId}", configuration.base_path, palletId=crate::apis::urlencode(pallet_id), storageItemId=crate::apis::urlencode(storage_item_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = key1 {
        local_var_req_builder = local_var_req_builder.query(&[("key1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key2 {
        local_var_req_builder = local_var_req_builder.query(&[("key2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = at {
        local_var_req_builder = local_var_req_builder.query(&[("at", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder = local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PalletsPalletIdStorageStorageItemIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

