/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SubstrateApiSidecarV1);
  }
}(this, function(expect, SubstrateApiSidecarV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SubstrateApiSidecarV1.Block();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Block', function() {
    it('should create an instance of Block', function() {
      // uncomment below and update the code to test Block
      //var instane = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be.a(SubstrateApiSidecarV1.Block);
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property parentHash (base name: "parentHash")', function() {
      // uncomment below and update the code to test the property parentHash
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property stateRoot (base name: "stateRoot")', function() {
      // uncomment below and update the code to test the property stateRoot
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicRoot (base name: "extrinsicRoot")', function() {
      // uncomment below and update the code to test the property extrinsicRoot
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property authorId (base name: "authorId")', function() {
      // uncomment below and update the code to test the property authorId
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property logs (base name: "logs")', function() {
      // uncomment below and update the code to test the property logs
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property onInitialize (base name: "onInitialize")', function() {
      // uncomment below and update the code to test the property onInitialize
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property extrinsics (base name: "extrinsics")', function() {
      // uncomment below and update the code to test the property extrinsics
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

    it('should have the property onFinalize (base name: "onFinalize")', function() {
      // uncomment below and update the code to test the property onFinalize
      //var instance = new SubstrateApiSidecarV1.Block();
      //expect(instance).to.be();
    });

  });

}));
