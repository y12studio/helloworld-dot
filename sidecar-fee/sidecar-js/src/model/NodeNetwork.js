/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeRole from './NodeRole';
import PeerInfo from './PeerInfo';

/**
 * The NodeNetwork model module.
 * @module model/NodeNetwork
 * @version 1.0.0-oas3
 */
class NodeNetwork {
    /**
     * Constructs a new <code>NodeNetwork</code>.
     * @alias module:model/NodeNetwork
     */
    constructor() { 
        
        NodeNetwork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeNetwork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeNetwork} obj Optional instance to populate.
     * @return {module:model/NodeNetwork} The populated <code>NodeNetwork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeNetwork();

            if (data.hasOwnProperty('nodeRoles')) {
                obj['nodeRoles'] = NodeRole.constructFromObject(data['nodeRoles']);
            }
            if (data.hasOwnProperty('numPeers')) {
                obj['numPeers'] = ApiClient.convertToType(data['numPeers'], 'String');
            }
            if (data.hasOwnProperty('isSyncing')) {
                obj['isSyncing'] = ApiClient.convertToType(data['isSyncing'], 'Boolean');
            }
            if (data.hasOwnProperty('shouldHavePeers')) {
                obj['shouldHavePeers'] = ApiClient.convertToType(data['shouldHavePeers'], 'Boolean');
            }
            if (data.hasOwnProperty('localPeerId')) {
                obj['localPeerId'] = ApiClient.convertToType(data['localPeerId'], 'String');
            }
            if (data.hasOwnProperty('localListenAddresses')) {
                obj['localListenAddresses'] = ApiClient.convertToType(data['localListenAddresses'], ['String']);
            }
            if (data.hasOwnProperty('peersInfo')) {
                obj['peersInfo'] = ApiClient.convertToType(data['peersInfo'], [PeerInfo]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/NodeRole} nodeRoles
 */
NodeNetwork.prototype['nodeRoles'] = undefined;

/**
 * Number of peers the node is connected to.
 * @member {String} numPeers
 */
NodeNetwork.prototype['numPeers'] = undefined;

/**
 * Whether or not the node is syncing. `False` indicates that the node is in sync.
 * @member {Boolean} isSyncing
 */
NodeNetwork.prototype['isSyncing'] = undefined;

/**
 * Whether or not the node should be connected to peers. Might be false for local chains or when running without discovery.
 * @member {Boolean} shouldHavePeers
 */
NodeNetwork.prototype['shouldHavePeers'] = undefined;

/**
 * Local copy of the `PeerId`.
 * @member {String} localPeerId
 */
NodeNetwork.prototype['localPeerId'] = undefined;

/**
 * Multiaddresses that the local node is listening on. The addresses include a trailing `/p2p/` with the local PeerId, and are thus suitable to be passed to `system_addReservedPeer` or as a bootnode address for example.
 * @member {Array.<String>} localListenAddresses
 */
NodeNetwork.prototype['localListenAddresses'] = undefined;

/**
 * @member {Array.<module:model/PeerInfo>} peersInfo
 */
NodeNetwork.prototype['peersInfo'] = undefined;






export default NodeNetwork;

