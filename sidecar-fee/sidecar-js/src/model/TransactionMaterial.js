/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockIdentifiers from './BlockIdentifiers';

/**
 * The TransactionMaterial model module.
 * @module model/TransactionMaterial
 * @version 1.0.0-oas3
 */
class TransactionMaterial {
    /**
     * Constructs a new <code>TransactionMaterial</code>.
     * Note: &#x60;chainName&#x60;, &#x60;specName&#x60;, and &#x60;specVersion&#x60; are used to define a type registry with a set of signed extensions and types. For Polkadot and Kusama, &#x60;chainName&#x60; is not used in defining this registry, but in other Substrate-based chains that re-launch their network without changing the &#x60;specName&#x60;, the &#x60;chainName&#x60; would be needed to create the correct registry. Substrate Reference: - &#x60;RuntimeVersion&#x60;: https://crates.parity.io/sp_version/struct.RuntimeVersion.html - &#x60;SignedExtension&#x60;: https://crates.parity.io/sp_runtime/traits/trait.SignedExtension.html -  FRAME Support: https://crates.parity.io/frame_support/metadata/index.html
     * @alias module:model/TransactionMaterial
     */
    constructor() { 
        
        TransactionMaterial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionMaterial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionMaterial} obj Optional instance to populate.
     * @return {module:model/TransactionMaterial} The populated <code>TransactionMaterial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionMaterial();

            if (data.hasOwnProperty('at')) {
                obj['at'] = BlockIdentifiers.constructFromObject(data['at']);
            }
            if (data.hasOwnProperty('genesisHash')) {
                obj['genesisHash'] = ApiClient.convertToType(data['genesisHash'], 'String');
            }
            if (data.hasOwnProperty('chainName')) {
                obj['chainName'] = ApiClient.convertToType(data['chainName'], 'String');
            }
            if (data.hasOwnProperty('specName')) {
                obj['specName'] = ApiClient.convertToType(data['specName'], 'String');
            }
            if (data.hasOwnProperty('specVersion')) {
                obj['specVersion'] = ApiClient.convertToType(data['specVersion'], 'String');
            }
            if (data.hasOwnProperty('txVersion')) {
                obj['txVersion'] = ApiClient.convertToType(data['txVersion'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/BlockIdentifiers} at
 */
TransactionMaterial.prototype['at'] = undefined;

/**
 * The hash of the chain's genesis block.
 * @member {String} genesisHash
 */
TransactionMaterial.prototype['genesisHash'] = undefined;

/**
 * The chain's name.
 * @member {String} chainName
 */
TransactionMaterial.prototype['chainName'] = undefined;

/**
 * The chain's spec.
 * @member {String} specName
 */
TransactionMaterial.prototype['specName'] = undefined;

/**
 * The spec version. Always increased in a runtime upgrade.
 * @member {String} specVersion
 */
TransactionMaterial.prototype['specVersion'] = undefined;

/**
 * The transaction version. Common `txVersion` numbers indicate that the transaction encoding format and method indices are the same. Needed for decoding in an offline environment. Adding new transactions does not change `txVersion`.
 * @member {String} txVersion
 */
TransactionMaterial.prototype['txVersion'] = undefined;

/**
 * The chain's metadata in hex format.
 * @member {String} metadata
 */
TransactionMaterial.prototype['metadata'] = undefined;






export default TransactionMaterial;

