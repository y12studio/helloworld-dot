/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnappliedSlash {
    /// Stash account ID of the offending validator.
    #[serde(rename = "validator", skip_serializing_if = "Option::is_none")]
    pub validator: Option<String>,
    /// The amount the validator will be slashed.
    #[serde(rename = "own", skip_serializing_if = "Option::is_none")]
    pub own: Option<String>,
    /// Array of tuples(`[accountId, amount]`) representing all the stashes of other slashed stakers and the amount they will be slashed.
    #[serde(rename = "others", skip_serializing_if = "Option::is_none")]
    pub others: Option<Vec<String>>,
    /// Array of account IDs of the reporters of the offense.
    #[serde(rename = "reporters", skip_serializing_if = "Option::is_none")]
    pub reporters: Option<Vec<String>>,
    /// Amount of bounty payout to reporters.
    #[serde(rename = "payout", skip_serializing_if = "Option::is_none")]
    pub payout: Option<String>,
}

impl UnappliedSlash {
    pub fn new() -> UnappliedSlash {
        UnappliedSlash {
            validator: None,
            own: None,
            others: None,
            reporters: None,
            payout: None,
        }
    }
}


