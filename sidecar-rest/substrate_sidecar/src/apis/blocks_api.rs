/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `get_block_by_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockByIdError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_head_block`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHeadBlockError {
    UnknownValue(serde_json::Value),
}


/// Returns a single block. BlockId can either be a block hash or a block height. Replaces `/block/{number}` from versions < v1.0.0.
pub async fn get_block_by_id(configuration: &configuration::Configuration, block_id: &str, event_docs: Option<bool>, extrinsic_docs: Option<bool>) -> Result<crate::models::Block, Error<GetBlockByIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/blocks/{blockId}", configuration.base_path, blockId=crate::apis::urlencode(block_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = event_docs {
        local_var_req_builder = local_var_req_builder.query(&[("eventDocs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extrinsic_docs {
        local_var_req_builder = local_var_req_builder.query(&[("extrinsicDocs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBlockByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the most recently finalized block. Replaces `/block` from versions < v1.0.0.
pub async fn get_head_block(configuration: &configuration::Configuration, finalized: Option<bool>, event_docs: Option<bool>, extrinsic_docs: Option<bool>) -> Result<crate::models::Block, Error<GetHeadBlockError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/blocks/head", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = finalized {
        local_var_req_builder = local_var_req_builder.query(&[("finalized", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = event_docs {
        local_var_req_builder = local_var_req_builder.query(&[("eventDocs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extrinsic_docs {
        local_var_req_builder = local_var_req_builder.query(&[("extrinsicDocs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetHeadBlockError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

