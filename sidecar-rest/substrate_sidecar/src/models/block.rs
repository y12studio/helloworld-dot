/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Block : Note: Block finalization does not correspond to consensus, i.e. whether the block is in the canonical chain. It denotes the finalization of block _construction._



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Block {
    /// The block's hash.
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<String>,
    /// The block's height.
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<String>,
    /// The hash of the parent block.
    #[serde(rename = "parentHash", skip_serializing_if = "Option::is_none")]
    pub parent_hash: Option<String>,
    /// The state root after executing this block.
    #[serde(rename = "stateRoot", skip_serializing_if = "Option::is_none")]
    pub state_root: Option<String>,
    /// The Merkle root of the extrinsics.
    #[serde(rename = "extrinsicRoot", skip_serializing_if = "Option::is_none")]
    pub extrinsic_root: Option<String>,
    /// The account ID of the block author (may be undefined for some chains).
    #[serde(rename = "authorId", skip_serializing_if = "Option::is_none")]
    pub author_id: Option<String>,
    /// Array of `DigestItem`s associated with the block.
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<crate::models::DigestItem>>,
    #[serde(rename = "onInitialize", skip_serializing_if = "Option::is_none")]
    pub on_initialize: Option<crate::models::BlockInitialize>,
    /// Array of extrinsics (inherents and transactions) within the block.
    #[serde(rename = "extrinsics", skip_serializing_if = "Option::is_none")]
    pub extrinsics: Option<Vec<crate::models::Extrinsic>>,
    #[serde(rename = "onFinalize", skip_serializing_if = "Option::is_none")]
    pub on_finalize: Option<crate::models::BlockFinalize>,
}

impl Block {
    /// Note: Block finalization does not correspond to consensus, i.e. whether the block is in the canonical chain. It denotes the finalization of block _construction._
    pub fn new() -> Block {
        Block {
            hash: None,
            height: None,
            parent_hash: None,
            state_root: None,
            extrinsic_root: None,
            author_id: None,
            logs: None,
            on_initialize: None,
            extrinsics: None,
            on_finalize: None,
        }
    }
}


