/*
 * Substrate API Sidecar v1.
 *
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PalletStorageItem {
    #[serde(rename = "at", skip_serializing_if = "Option::is_none")]
    pub at: Option<crate::models::BlockIdentifiers>,
    /// Name of the pallet.
    #[serde(rename = "pallet", skip_serializing_if = "Option::is_none")]
    pub pallet: Option<String>,
    /// Index of the pallet for looking up storage.
    #[serde(rename = "palletIndex", skip_serializing_if = "Option::is_none")]
    pub pallet_index: Option<String>,
    /// Name of the storage item.
    #[serde(rename = "storageItem", skip_serializing_if = "Option::is_none")]
    pub storage_item: Option<String>,
    /// Key1 query param. Will not show up in response unless it was passed as part of the URI.
    #[serde(rename = "key1", skip_serializing_if = "Option::is_none")]
    pub key1: Option<String>,
    /// Key2 query param. Will not show up in response if not defined in URI.
    #[serde(rename = "key2", skip_serializing_if = "Option::is_none")]
    pub key2: Option<String>,
    /// Value returned by this storage query.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<crate::models::PalletStorageItemMetadata>,
}

impl PalletStorageItem {
    pub fn new() -> PalletStorageItem {
        PalletStorageItem {
            at: None,
            pallet: None,
            pallet_index: None,
            storage_item: None,
            key1: None,
            key2: None,
            value: None,
            metadata: None,
        }
    }
}


