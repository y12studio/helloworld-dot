/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockIdentifiers from './BlockIdentifiers';
import Nominations from './Nominations';
import StakingLedger from './StakingLedger';

/**
 * The AccountStakingInfo model module.
 * @module model/AccountStakingInfo
 * @version 1.0.0-oas3
 */
class AccountStakingInfo {
    /**
     * Constructs a new <code>AccountStakingInfo</code>.
     * Note: Runtime versions of Kusama less than 1062 will either have &#x60;lastReward&#x60; in place of &#x60;claimedRewards&#x60;, or no field at all. This is related to changes in reward distribution. See: [Lazy Payouts](https://github.com/paritytech/substrate/pull/4474), [Simple Payouts](https://github.com/paritytech/substrate/pull/5406)
     * @alias module:model/AccountStakingInfo
     */
    constructor() { 
        
        AccountStakingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountStakingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountStakingInfo} obj Optional instance to populate.
     * @return {module:model/AccountStakingInfo} The populated <code>AccountStakingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountStakingInfo();

            if (data.hasOwnProperty('at')) {
                obj['at'] = BlockIdentifiers.constructFromObject(data['at']);
            }
            if (data.hasOwnProperty('rewardDestination')) {
                obj['rewardDestination'] = ApiClient.convertToType(data['rewardDestination'], 'String');
            }
            if (data.hasOwnProperty('controller')) {
                obj['controller'] = ApiClient.convertToType(data['controller'], 'String');
            }
            if (data.hasOwnProperty('numSlashingSpans')) {
                obj['numSlashingSpans'] = ApiClient.convertToType(data['numSlashingSpans'], 'String');
            }
            if (data.hasOwnProperty('nominations')) {
                obj['nominations'] = Nominations.constructFromObject(data['nominations']);
            }
            if (data.hasOwnProperty('stakingLedger')) {
                obj['stakingLedger'] = StakingLedger.constructFromObject(data['stakingLedger']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/BlockIdentifiers} at
 */
AccountStakingInfo.prototype['at'] = undefined;

/**
 * The account to which rewards will be paid. Can be 'Staked' (Stash account, adding to the amount at stake), 'Stash' (Stash address, not adding to the amount at stake), or 'Controller' (Controller address).
 * @member {module:model/AccountStakingInfo.RewardDestinationEnum} rewardDestination
 */
AccountStakingInfo.prototype['rewardDestination'] = undefined;

/**
 * Controller address for the given Stash.
 * @member {String} controller
 */
AccountStakingInfo.prototype['controller'] = undefined;

/**
 * Number of slashing spans on Stash account; `null` if provided address is not a Controller.
 * @member {String} numSlashingSpans
 */
AccountStakingInfo.prototype['numSlashingSpans'] = undefined;

/**
 * @member {module:model/Nominations} nominations
 */
AccountStakingInfo.prototype['nominations'] = undefined;

/**
 * @member {module:model/StakingLedger} stakingLedger
 */
AccountStakingInfo.prototype['stakingLedger'] = undefined;





/**
 * Allowed values for the <code>rewardDestination</code> property.
 * @enum {String}
 * @readonly
 */
AccountStakingInfo['RewardDestinationEnum'] = {

    /**
     * value: "Staked"
     * @const
     */
    "Staked": "Staked",

    /**
     * value: "Stash"
     * @const
     */
    "Stash": "Stash",

    /**
     * value: "Controller"
     * @const
     */
    "Controller": "Controller"
};



export default AccountStakingInfo;

