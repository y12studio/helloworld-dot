/**
 * Substrate API Sidecar v1.
 * Substrate API Sidecar is a REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RuntimeCode from '../model/RuntimeCode';
import RuntimeSpec from '../model/RuntimeSpec';

/**
* Runtime service.
* @module api/RuntimeApi
* @version 1.0.0-oas3
*/
export default class RuntimeApi {

    /**
    * Constructs a new RuntimeApi. 
    * @alias module:api/RuntimeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the runtime wasm blob.
     * Returns the runtime Wasm blob in hex format.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve the runtime wasm blob at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuntimeCode} and HTTP response
     */
    runtimeCodeGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'at': opts['at']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuntimeCode;
      return this.apiClient.callApi(
        '/runtime/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the runtime wasm blob.
     * Returns the runtime Wasm blob in hex format.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve the runtime wasm blob at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuntimeCode}
     */
    runtimeCodeGet(opts) {
      return this.runtimeCodeGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the runtime metadata in decoded, JSON form.
     * Returns the runtime metadata as a JSON object. Substrate Reference: - FRAME Support: https://crates.parity.io/frame_support/metadata/index.html - Knowledge Base: https://substrate.dev/docs/en/knowledgebase/runtime/metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve the metadata at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    runtimeMetadataGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'at': opts['at']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/runtime/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the runtime metadata in decoded, JSON form.
     * Returns the runtime metadata as a JSON object. Substrate Reference: - FRAME Support: https://crates.parity.io/frame_support/metadata/index.html - Knowledge Base: https://substrate.dev/docs/en/knowledgebase/runtime/metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve the metadata at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    runtimeMetadataGet(opts) {
      return this.runtimeMetadataGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get version information of the Substrate runtime.
     * Returns version information related to the runtime.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve runtime version information at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuntimeSpec} and HTTP response
     */
    runtimeSpecGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'at': opts['at']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuntimeSpec;
      return this.apiClient.callApi(
        '/runtime/spec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get version information of the Substrate runtime.
     * Returns version information related to the runtime.
     * @param {Object} opts Optional parameters
     * @param {String} opts.at Block at which to retrieve runtime version information at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuntimeSpec}
     */
    runtimeSpecGet(opts) {
      return this.runtimeSpecGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
